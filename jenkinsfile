// Jenkinsfile (Buildah + Python, semver(+sha)+latest 태그 푸시)
pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "agent"
spec:
  restartPolicy: Never
  nodeSelector:
    kubernetes.io/os: linux
  securityContext:
    runAsUser: 0
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildah
      image: quay.io/buildah/stable:v1.34.0
      securityContext:
        privileged: true
      env:
        - name: STORAGE_DRIVER
          value: vfs
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: python
      image: python:3.11-slim
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: jnlp
      image: jenkins/inbound-agent:3327.v868139a_d00e0-6
      env:
        - name: JENKINS_AGENT_WORKDIR
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
'''
    }
  }
  triggers { githubPush() }
  options {
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
    timestamps()
  }
  environment {
    IMAGE_BASE = 'docker.io/sessaczump/zump-api-amd64'
    REGISTRY   = 'docker.io'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Resolve Version') {
      steps {
        script {
          // 최신 git 태그(semver)를 버전으로, 없으면 1.0.0
          def ver = sh(script: "git describe --tags --abbrev=0 2>/dev/null || echo 1.0.0", returnStdout: true).trim()
          def sha = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          env.VERSION  = ver
          env.GIT_SHA  = sha
          env.IMAGE_LATEST   = "${env.IMAGE_BASE}:latest"
          env.IMAGE_VERSION  = "${env.IMAGE_BASE}:${env.VERSION}"
          env.IMAGE_IMMUTABLE= "${env.IMAGE_BASE}:${env.VERSION}+${env.GIT_SHA}"
          echo "Version: ${env.VERSION}, SHA: ${env.GIT_SHA}"
        }
      }
    }

    stage('Test Dependencies') {
      steps {
        container('python') {
          sh '''
            python -V
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            # 빌드 검증 테스트
            if [ -f tests/test_build_validation.py ]; then python -m pytest tests/test_build_validation.py -v --tb=short; fi
            echo "빌드 검증 테스트 통과"
          '''
        }
      }
    }

    stage('Code Quality Check') {
      steps {
        container('python') {
          sh '''
            . .venv/bin/activate || true
            # 파이썬 문법 검사
            if [ -f main.py ]; then python -m py_compile main.py; fi
            find . -name "*.py" -print0 | xargs -0 -I{} python -m py_compile "{}" || true
            echo "코드 문법 검사 통과"
          '''
        }
      }
    }

    stage('Registry login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'REG_USERNAME', passwordVariable: 'REG_PASSWORD')]) {
          container('buildah') {
            sh '''
              echo "$REG_PASSWORD" | buildah login --username "$REG_USERNAME" --password-stdin docker.io
            '''
          }
        }
      }
    }

    stage('Build image (Buildah)') {
      steps {
        container('buildah') {
          sh '''
            buildah version || true
            buildah info || true
            echo "이미지 빌드 시작..."
            # 기본 이미지: docker 포맷 (Docker Hub 호환)
            buildah bud --format docker -f Dockerfile -t "${IMAGE_IMMUTABLE}" .
            # 추가 태그 부여
            buildah tag "${IMAGE_IMMUTABLE}" "${IMAGE_VERSION}"
            buildah tag "${IMAGE_IMMUTABLE}" "${IMAGE_LATEST}"
            echo "빌드된 이미지:"
            buildah images | grep -E "${IMAGE_BASE}"
          '''
        }
      }
    }

    stage('Push images') {
      steps {
        container('buildah') {
          sh '''
            set -e
            for TAG in "${IMAGE_IMMUTABLE}" "${IMAGE_VERSION}" "${IMAGE_LATEST}"; do
              echo "Pushing $TAG"
              buildah push "$TAG"
            done
          '''
        }
      }
    }
  }

  post {
    success { echo '✅ 빌드/푸시 성공 — AIU가 최신 semver 태그를 감지해 kustomization.yaml을 갱신할 거예요.' }
    failure { echo '❌ 빌드 실패 — 로그를 확인하세요.' }
    always {
      container('buildah') {
        sh '''
          buildah logout ${REGISTRY} || true
          # 로컬 이미지 정리(옵션)
          buildah rmi -f "${IMAGE_IMMUTABLE}" "${IMAGE_VERSION}" "${IMAGE_LATEST}" 2>/dev/null || true
        '''
      }
      container('python') {
        sh 'rm -rf .venv || true'
      }
    }
  }
}
