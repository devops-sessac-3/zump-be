// Jenkinsfile — Buildah + Python
// - 태그 정책: 순수 semver(X.Y.Z) + latest
// - 옵션: PUSH_IMMUTABLE=true 로 두면 X.Y.Z-<sha>도 함께 푸시
// - Argo CD Image Updater는 allow-tags=regexp:^\\d+\\.\\d+\\.\\d+$ 와 찰떡궁합
// - Git 태그는 사용하지 않고, Docker Hub 레지스트리의 기존 태그를 기반으로 버전을 올립니다.

pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "agent"
spec:
  restartPolicy: Never
  nodeSelector:
    kubernetes.io/os: linux
  securityContext:
    runAsUser: 0
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildah
      image: quay.io/buildah/stable:v1.34.0
      securityContext:
        privileged: true
      env:
        - name: STORAGE_DRIVER
          value: vfs
        - name: BUILDAH_ISOLATION
          value: chroot
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent

    - name: python
      image: python:3.11-slim
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent

    - name: git
      image: alpine/git:2.45.2
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent

    - name: jnlp
      image: jenkins/inbound-agent:3327.v868139a_d00e0-6
      env:
        - name: JENKINS_AGENT_WORKDIR
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
'''
    }
  }

  triggers { githubPush() }

  options {
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'BUMP', choices: ['patch', 'minor', 'major'], description: '도커 레포 기준으로 올릴 버전 종류')
  }

  environment {
    IMAGE_BASE     = 'docker.io/sessaczump/zump-api-amd64'
    REGISTRY       = 'docker.io'
    // 불변 태그(X.Y.Z-<sha>)도 푸시하려면 true
    PUSH_IMMUTABLE = 'false'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout(scm)
        container('git') {
          sh '''
            set -euxo pipefail
            git fetch --tags --force || true
          '''
        }
      }
    }

    // 🔎 Docker Hub 레포의 태그 목록을 읽어 다음 semver를 계산
    stage('Resolve Version from Registry (semver bump)') {
      steps {
        container('python') {
          script {
            def nextVer = sh(
              label: 'Compute next semver from Docker Hub',
              returnStdout: true,
              script: '''
                set -euo pipefail

                IMAGE_BASE="${IMAGE_BASE}"
                REPO="${IMAGE_BASE#docker.io/}"  # ex) sessaczump/zump-api-amd64
                NS="${REPO%%/*}"
                NAME="${REPO#*/}"
                BUMP_KIND="${BUMP:-patch}"

                python3 - <<'PY'
import os, sys, json, urllib.request, urllib.error, re

ns   = os.environ["NS"]
name = os.environ["NAME"]
bump = os.environ.get("BUMP_KIND","patch").lower()

SEMVER = re.compile(r"^(\\d+)\\.(\\d+)\\.(\\d+)$")

def fetch_all_tags():
    tags = []
    url = f"https://hub.docker.com/v2/repositories/{ns}/{name}/tags?page_size=100&ordering=last_updated"
    while url:
        try:
            with urllib.request.urlopen(url, timeout=15) as r:
                data = json.load(r)
        except Exception as e:
            # 공개 레포가 아닐 수 있음 — 기본 시작 버전으로 진행
            print("1.0.0")
            return None
        for it in data.get("results", []):
            t = it.get("name")
            if isinstance(t, str):
                tags.append(t)
        url = data.get("next")
    return tags

def max_semver(tags):
    good = []
    for t in tags:
        m = SEMVER.match(t)
        if m:
            good.append(tuple(map(int, m.groups())))
    if not good:
        return (1,0,0)  # 초기 시작값
    return max(good)

tags = fetch_all_tags()
if tags is None:
    # API 실패 시 안전하게 초기값 사용
    base = (1,0,0)
else:
    base = max_semver(tags)

major, minor, patch = base

if bump == "patch":
    patch += 1
elif bump == "minor":
    minor += 1; patch = 0
elif bump == "major":
    major += 1; minor = 0; patch = 0
else:
    patch += 1

candidate = f"{major}.{minor}.{patch}"

# 이미 존재하면 patch를 올리며 비어있는 슬롯을 탐색
if tags:
    used = set(t for t in tags if SEMVER.match(t))
    cmaj, cmin, cpat = major, minor, patch
    while candidate in used:
        cpat += 1
        candidate = f"{cmaj}.{cmin}.{cpat}"

print(candidate)
PY
              '''
            ).trim()

            def sha = sh(script: "git rev-parse --short HEAD || echo nolocalgit", returnStdout: true).trim()

            env.VERSION         = nextVer                      // X.Y.Z
            env.GIT_SHA         = sha
            env.IMAGE_VERSION   = "${env.IMAGE_BASE}:${env.VERSION}"
            env.IMAGE_LATEST    = "${env.IMAGE_BASE}:latest"
            env.IMAGE_IMMUTABLE = "${env.IMAGE_BASE}:${env.VERSION}-${env.GIT_SHA}"

            echo "✔ Next version from registry: ${env.VERSION} (bump=${params.BUMP})"
          }
        }
      }
    }

    stage('Python: deps & quick checks') {
      steps {
        container('python') {
          sh '''
            set -euxo pipefail
            python -V
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

            if [ -f main.py ]; then python -m py_compile main.py; fi
            find . -name "*.py" -print0 | xargs -0 -I{} python -m py_compile "{}" || true

            if [ -f tests/test_build_validation.py ]; then python -m pytest tests/test_build_validation.py -v --tb=short; fi
            echo "✔ Python checks passed"
          '''
        }
      }
    }

    stage('Registry login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'REG_USERNAME', passwordVariable: 'REG_PASSWORD')]) {
          container('buildah') {
            sh '''
              set -euxo pipefail
              echo "$REG_PASSWORD" | buildah login --username "$REG_USERNAME" --password-stdin docker.io
            '''
          }
        }
      }
    }

    stage('Build image (Buildah)') {
      steps {
        container('buildah') {
          sh '''
            set -euxo pipefail
            buildah version || true
            buildah info || true

            echo "🔨 Build ${IMAGE_VERSION}"
            buildah bud --format docker -f Dockerfile -t "${IMAGE_VERSION}" .

            buildah tag "${IMAGE_VERSION}" "${IMAGE_LATEST}"

            if [ "${PUSH_IMMUTABLE}" = "true" ]; then
              buildah tag "${IMAGE_VERSION}" "${IMAGE_IMMUTABLE}"
            fi

            echo "✔ Built images:"
            buildah images | grep -E "${IMAGE_BASE}" || true
          '''
        }
      }
    }

    stage('Push images') {
      steps {
        container('buildah') {
          sh '''
            set -euxo pipefail

            # 존재 여부를 한 번 더 확인(희박하지만 경쟁상황 방지)
            # Docker Hub API에서 방금 계산한 VERSION이 이미 생겼다면 실패 처리하거나 patch++ 로직을 추가할 수 있습니다.
            for TAG in "${IMAGE_VERSION}" "${IMAGE_LATEST}"; do
              echo "📤 Pushing $TAG"
              buildah push "$TAG"
            done

            if [ "${PUSH_IMMUTABLE}" = "true" ]; then
              echo "📤 Pushing ${IMAGE_IMMUTABLE}"
              buildah push "${IMAGE_IMMUTABLE}"
            fi
          '''
        }
      }
    }
  }

  post {
    success {
      echo '✅ 빌드/푸시 성공 — Docker Hub 기준 semver 자동 상승 완료. AIU가 ^\\d+\\.\\d+\\.\\d+$ 최신 태그를 감지합니다.'
    }
    failure {
      echo '❌ 빌드 실패 — 콘솔 로그를 확인하세요.'
    }
    always {
      container('buildah') {
        sh '''
          set +e
          buildah logout ${REGISTRY} || true
          buildah rmi -f "${IMAGE_VERSION}" "${IMAGE_LATEST}" "${IMAGE_IMMUTABLE}" 2>/dev/null || true
        '''
      }
      container('python') {
        sh 'rm -rf .venv || true'
      }
    }
  }
}
