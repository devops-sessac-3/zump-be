// Jenkinsfile for Buildah
pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "agent"
spec:
  restartPolicy: Never
  nodeSelector:
    kubernetes.io/os: linux
  securityContext:
    runAsUser: 0
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildah
      image: quay.io/buildah/stable:v1.34.0
      securityContext:
        privileged: true
      env:
        - name: STORAGE_DRIVER
          value: vfs
      command: ['cat']
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: jnlp
      image: jenkins/inbound-agent:3327.v868139a_d00e0-6
      env:
        - name: JENKINS_AGENT_WORKDIR
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
'''
        }
    }
    triggers {
        githubPush()
    }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }
    environment {
        DOCKER_IMAGE_REMOTE = 'sessaczump/zump-api-amd64:latest'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Test Dependencies') {
            steps {
                container('buildah') {
                    sh '''
                        # Python 환경 설정
                        python3 -m venv /tmp/venv
                        source /tmp/venv/bin/activate
                        
                        # 의존성 설치
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        
                        # 빌드 검증 테스트 실행
                        python -m pytest tests/test_build_validation.py -v --tb=short
                        
                        echo "빌드 검증 테스트 통과"
                    '''
                }
            }
        }
        stage('Code Quality Check') {
            steps {
                container('buildah') {
                    sh '''
                        source /tmp/venv/bin/activate
                        
                        # 코드 문법 검사
                        python -m py_compile main.py
                        find . -name "*.py" -print0 | xargs -0 python -m py_compile
                        
                        echo "코드 문법 검사 통과"
                    '''
                }
            }
        }
        stage('Registry login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'REG_USERNAME', passwordVariable: 'REG_PASSWORD')]) {
                    container('buildah') {
                        sh '''
                            echo "$REG_PASSWORD" | buildah login --username "$REG_USERNAME" --password-stdin docker.io
                        '''
                    }
                }
            }
        }
        stage('Build image (Buildah)') {
            steps {
                container('buildah') {
                    sh '''
                        buildah version | cat
                        buildah info | cat
                        
                        # 테스트 통과 후 Docker 이미지 빌드
                        echo "Docker 이미지 빌드를 시작합니다..."
                        buildah bud --format docker -f Dockerfile -t ${DOCKER_IMAGE_REMOTE} .
                        
                        # 빌드된 이미지 정보 출력
                        echo "빌드된 이미지 정보:"
                        buildah images ${DOCKER_IMAGE_REMOTE}
                        
                        echo "Docker 이미지 빌드 완료"
                    '''
                }
            }
        }
        stage('Push image') {
            steps {
                container('buildah') {
                    sh 'buildah push ${DOCKER_IMAGE_REMOTE}'
                }
            }
        }
        stage('Cleanup') {
            steps {
                container('buildah') {
                    sh 'buildah rmi -f ${DOCKER_IMAGE_REMOTE} || true'
                }
            }
        }
    }
    post {
        success { echo '빌드가 성공적으로 완료되었습니다!'}
        failure { echo '빌드가 실패했습니다. 로그를 확인해주세요.'}
        always {
            container('buildah') {
                sh '''
                    # 정리 작업
                    buildah logout docker.io || true
                    rm -rf /tmp/venv || true
                '''
            }
        }
    }
}
